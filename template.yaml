AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  AWSLambdaJava21ServerlessV2DataApi
  Sample SAM Template

Parameters:
  DBClusterName:
    Description: "Aurora Serverless V2 RDS cluster name"
    Type: String
    Default: AuroraServerlessV2DataApiCluster
  DatabaseName:
    Description: "Aurora Serverless V2 RDS database name"
    Type: String
    Default: AuroraServerlessV2DataApiClusterDB
  DatabaseStackName:
    Description: "Name of the Aurora Serverlss V2 CloudFormation stack to import parameters from"
    Type: String
    Default: AuroraServerlessV2
  DBMasterUserName:
    Type: String
    Default: postgres
  UserSecret:
    Type: String
    Default: AuroraServerlessV2UserSecret
  Stage:
    Type: String
    Default: prod
    
  Subnets:
    Type: CommaDelimitedList  
    Default: subnet-0787be4d, subnet-88dc46e0
    Description: The list of SubnetIds, for at least two Availability Zones in the
      region in your Virtual Private Cloud (VPC)
    
Globals:
  Function:
    CodeUri: target/aws-lambda-java-21-aurora-serverless-v2-data-api-1.0.0-SNAPSHOT.jar
    Runtime: java21
    Timeout: 30 
    MemorySize: 1024  
    Environment:
      Variables:
        JAVA_TOOL_OPTIONS: "-XX:+TieredCompilation -XX:TieredStopAtLevel=1"
        DB_ENDPOINT: !GetAtt AuroraServerlessV2Cluster.Endpoint.Address
        DB_NAME: !Ref DatabaseName
        DB_CLUSTER_ARN: !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${DBClusterName}
        DB_CRED_SECRETS_STORE_ARN: !Ref  DBSecret
        
Resources:

  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Name: AWSServerlessV2ProductApiViaDataApi
      Description: Api for Serverless V2 Data Api access
      AccessLogSetting:
        DestinationArn: !Sub ${MyApiLogGroup.Arn} # This Log Group is already created within our SAM Template
        Format: "{'integrationLatency':'$context.integrationLatency', 'latency':'$context.responseLatency', 'requestId':'$context.requestId', 'ip': '$context.identity.sourceIp', 'caller':'$context.identity.caller', 'user':'$context.identity.user','requestTime':'$context.requestTime', 'xrayTraceId':'$context.xrayTraceId', 'wafResponseCode':'$context.wafResponseCode', 'httpMethod':'$context.httpMethod','resourcePath':'$context.resourcePath', 'status':'$context.status','protocol':'$context.protocol', 'responseLength':'$context.responseLength' }"
      #MethodSettings:
       # - MetricsEnabled: True
       #   ResourcePath: '/*'
       #   HttpMethod: '*'
      Auth:
        ApiKeyRequired: true  # sets for all methods
      
        
  MyApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
       LogGroupName: !Sub "/aws/apigateway/${MyApi}"
       RetentionInDays: 7
      
  MyApiUsagePlan:
     Type: AWS::ApiGateway::UsagePlan
     DependsOn:  
        - MyApiStage
     Properties:
      ApiStages: 
        - ApiId: !Ref MyApi
          Stage: !Ref Stage
      UsagePlanName: AWSServerlessV2ProductApiViaDataApiUsagePlan
      Description: Usage plan for AWSServerlessV2ProductApiViaDataApi
      Quota:
          Limit: 500000
          Period: DAY
      Throttle:
          RateLimit:  10000
          BurstLimit: 5000   

  MyApiKey: 
    Type: AWS::ApiGateway::ApiKey
    DependsOn:  
       - MyApiStage
    Properties: 
      Name: "AWSServerlessV2ProductApiViaDataApuAKey"
      Description: "AWSServerlessV2ProductApiViaDataApi Api Key"
      Enabled: true
      GenerateDistinctId: false
      Value: a6ZbcDefQW12BN56WEX7
      StageKeys:
        - RestApiId: !Ref MyApi
          StageName: !Ref Stage

  MyApiUsagePlanKey:
      Type: "AWS::ApiGateway::UsagePlanKey"
      DependsOn: 
      - MyApi
      Properties:
        KeyId: !Ref MyApiKey
        KeyType: API_KEY
        UsagePlanId: !Ref MyApiUsagePlan


  GetProductByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetProductByIdViaServerlessV2DataApiLambda
      Environment:
        Variables:
          DB_ENDPOINT: !GetAtt AuroraServerlessV2Cluster.Endpoint.Address
      Policies:
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - rds-data:*
              Resource:
                 !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${DBClusterName}
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                !Ref DBSecret
                
      Handler: software.amazonaws.example.product.handler.GetProductByIdViaServerlessV2DataApiHandler::handleRequest
      Events:
        GetRequestById:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /products/{id}
            Method: get     
            
            
  GetProductByIdFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GetProductByIdFunction}"
      RetentionInDays: 7

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets available for the RDS DB Instance
      SubnetIds:
       Ref: Subnets
        
        
  DBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Ref UserSecret
      Description: RDS database auto-generated user password
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${DBMasterUserName}"}'
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'
 
         
  AuroraServerlessV2Cluster:
    Type: 'AWS::RDS::DBCluster'
    DeletionPolicy: Delete
    Properties:
      DBClusterIdentifier: !Ref DBClusterName
      Engine: aurora-postgresql
      EnableHttpEndpoint: true
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref DBSecret, ':SecretString:username}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref DBSecret, ':SecretString:password}}' ]]
      DatabaseName: !Ref DatabaseName
      ServerlessV2ScalingConfiguration:
        MinCapacity: 0.5
        MaxCapacity: 2
      DBSubnetGroupName:
        Ref: DBSubnetGroup
  
  AuroraServerlessV2Instance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      Engine: aurora-postgresql
      DBInstanceClass: db.serverless
      DBClusterIdentifier: !Ref AuroraServerlessV2Cluster
      

Outputs:
  AWSLambdaJavaAuroraServerlessV2DataApiEndpoint:
    Description: "API Gateway endpoint URL for Prod stage for AWS Lambda Java Serverless V2 Data API"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/prod/products"
    
  DatabaseName:
    Description: Aurora Database Name
    Value: !Ref DatabaseName
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseName
    
  DatabaseClusterArn:
    Description: Aurora Cluster ARN
    Value: !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${DBClusterName}
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseClusterArn
    
  DatabaseSecretArn:
    Description: Aurora Secret ARN
    Value: !Ref DBSecret
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseSecretArn
    
  DatabaseClusterID:
    Description: Aurora Cluster ID
    Value: !Ref AuroraServerlessV2Cluster
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseClusterID
    
  AuroraServerlessV2DBURL:
    Description: Aurora Database URL
    Value: !GetAtt AuroraServerlessV2Cluster.Endpoint.Address
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseURL
    
  DatabaseMasterUserName:
    Description: Aurora Database User
    Value: !Ref DBMasterUserName
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseMasterUserName